String methods:
toUppercase()...........................

Methods with regexp as input
---------------------------

matches(regexp)
split(regexp)
replaceAll(...)
replaceFirst(..)......


Regular expressions
--------------------
- validations
- checking the formats

[abc] - a or b or c
[abc][abc][abc] - abc ,aaa,abb , xyz......
[0-9] - match a single digit
[a-eA-E] - b , B
[^abc] - z, y , x

Quantifiers
-----------
? - [abc]? - o time or 1 time
*  - [abc]* - 0time or n times
+ - [abc]+ - atleast 1 time or n times

[a-f]+ - a , abc , afe , abcdef
[a-f]? - a, f , b
[a-f]*

{min,max}
[a-e]{2,6} - aa,abc ,abbcd , aeeeee ,addcd, ab
[a-z]{3,} -  aaa ,aabba,
[0-9]{2} - 00 , 12 ,11 ,23, 99

metacharacters
---------------
\d - [0-9]
\D - non-digit
\w - [a-zA-Z_0-9]
\W - [^a-zA-Z_0-9]
\s
\S
...............................

Principles of Object orientation
---------------------------------
- World is a collection of Object
- Every object is useful, there is no useless object
- Every object is the constant interaction with another object, no object lies in isolation
- Every Object belongs to a type , technically we call the type as class . Class doesnot exists in reality what exists
in reality is object


Object
-------
- has part - property of object - Datatypes
- does part -Behaviour  of Object - methods

Instance variables
- inside the class but outside the method
- if values are not assigned, default values are allocated for it
Reference variables - holds address/reference of the Object
local variables - created within the methods
static/class variables - it will static

Benefits of using Method Overloading
-------------------------------------
-Method overloading increases the readability of the program.
-This provides flexibility to programmers so that they can call the same method for different types of data.
-This makes the code look clean.
-This reduces the execution time because the binding is done in compilation time itself.
-Method overloading minimises the complexity of the code.
-With this, we can use the code again, which saves memory.



